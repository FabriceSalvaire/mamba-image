# exampleA4.py
# OUT road_seg_snapshot.png

## TITLE #######################################################################
# Road segmentation in realtime condition

## DESCRIPTION #################################################################
# This example demonstrates the realtime capabilities offered by the 
# mambaRealtime module with a very specific algorithm of road segmentation.
# 
# This algorithm extracts the road and colorizes it.
# This is a very simple algorithm and as you will be able to see if you run
# it, the segmentation is not perfect and depends greatly on the "quality"
# of the road texture. Passing from shade to sun light also proves to be difficult.
# However, the algorithm manages to stay "on track".
# The video is a small excerpt (starting at 6:11) of a rally race onboard video
# recorded by the official WRC organisation you can find at
# http://www.youtube.com/watch?v=Z9X03IJiLmo. The small excerpt can be found
# in the examples directory of the mamba sources.

## SCRIPT ######################################################################
# Importing mamba and associates
from mamba import *
from mambaComposed import *
from mambaDraw import *
from mambaExtra import *
# Importing the realtime module
from mambaRealtime import *

import time

def roadSegmentation(imIn, imOut, gradsize=1, erosize=10, draw=0, coefth=0.2):
    """
    A road segmentation algorithm.
    This algorithm uses the im_marker 32-bit image to remember previous
    results from call to call.
    """
    global im_marker, w, h
    grad = imageMb(imIn, 8)
    pre_mark = imageMb(imIn, 8)
    marker_n = imageMb(imIn, 1)
    marker_n1 = imageMb(imIn, 1)
    infi = imageMb(imIn, 1)
    supi = imageMb(imIn, 1)
    wtshed = imageMb(imIn, 8)
    basins = imageMb(imIn, 8)
    
    # We first copy the lower byte of the marker image for future use.
    copyBytePlane(im_marker, 0, pre_mark)
    convert(pre_mark, marker_n)
    # Performing a watershed segmentation on the gradient using the
    # marker image for the initial wells.
    gradient(imIn, grad, gradsize)
    watershedSegment(grad, im_marker)
    # Extracting the watershed line and basins.
    copyBytePlane(im_marker, 3, wtshed)
    copyBytePlane(im_marker, 0, basins)
    # The next lines are here to compute what we display.
    # If draw is 1, basins is displayed which means all the road
    # will appear in red.
    # Otherwise, only the road edge will be drawn in red.
    subConst(imIn, 1, imOut)
    if draw==1:
        logic(imOut, basins, imOut, "sup")
    else:
        logic(imOut, wtshed, imOut, "sup")
    # We then compute the next marker image.
    im_marker.reset()
    # First we extract the basin corresponding to the road as it will
    # serve as the well in the next segmentation.
    # The basin is then eroded to shrink its size to prevent it
    # from being larger than the road it will have to segment
    # in next call.
    convert(basins, marker_n1)
    largeHexagonalErode(marker_n1, marker_n1, erosize)
    # The following computation is here to ensure the new well is not
    # too different than the previous one.
    logic(marker_n, marker_n1, infi, "inf")
    logic(marker_n, marker_n1, supi, "sup")
    vinf = computeVolume(infi)
    vsup = computeVolume(supi)
    if float(vinf)<coefth*vsup:
        # if ok the marker image is rebuilt using it.
        # The outside marker is generated by inverting the road marker
        # and by eroding it (5 times the size of the erosion used for
        # the inner one).
        negate(marker_n1, infi)
        convertByMask(marker_n1, basins, 0, 255)
        largeHexagonalErode(infi, infi, erosize*5)
        add(basins, infi, basins)
        copyBytePlane(basins, 0, im_marker)
    else:
        # If too different, we reuse the older one.
        copyBytePlane(pre_mark, 0, im_marker)

# Launching the realtime acquisition using the video "excerpt_rally.mp4" as 
# the source.
launchRealtime("excerpt_rally.mp4", AVC)

# The video has a specific dimension that we need to know to create our 
# marker image.
w,h = getSizeRealtime()

# the marker image is used to initialise the watershed segmentation wells
# Two markers : the road (255) that is assumed to be at the center of the
# video at the beginning and the rest of the image (not the road (1), which is
# assumed to be at the border of the video at the beginning (of course in this
# example we can see the car hood so there is no road at the bottom).
im_marker = imageMb(w,h,32)
drawBox(im_marker, [15,15,w-15,h-15], 1)
drawSquare(im_marker, [w/2-15,h/2-15,w/2+15,h/2+15], 255)

# Only the road will be output in color (red).
pal = tagOneColorPalette(255, (255,0,0))
setPaletteRealtime(pal)

# Launching the processing.
setProcessRealtime(roadSegmentation, INSTANT, gradsize=2, erosize=10, draw=1, coefth=0.2)

# Taking a snapshot picture of the result.
time.sleep(0.2)
takePictureRealtime("road_seg_snapshot.png")
time.sleep(1)

